plugins {
    id "jacoco"
    id "org.sonarqube"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory.set(layout.projectDirectory.dir("src/jacoco"))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/AndroidManifest.xml', '**/strings.xml', '**/*.xml', '**/*.json']
    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debugUnitTest", excludes: fileFilter)
    def kotlinTreeModels = fileTree(dir: "${project.projectDir}/src/main/java/com/<package_dir>/model", excludes: [])

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([kotlinTree, kotlinTreeModels]))
    executionData.setFrom(fileTree(dir: "$project.projectDir",
            includes: ['**/*.exec', '**/*.ec']
    ))
}

sonarqube {
    properties {
        property "sonar.organization", "Test"
        property "sonar.projectKey", "com.android.example.geofences"
        property "sonar.projectName", "Geolocation"
        property "sonar.projectVersion", "1.0"
        property "sonar.exclusions", ['**/com/skydoves/powerspinner/*', 'robospice/**/*']
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "kotlin"
        property "sonar.binaries", "build"
        property "sonar.login", "admin" //Use your Sonarqube login
        property "sonar.password", "4820" //Use your Sonarqube password
        property "sonar.sources", ["src/test", "src/main/java"]
        property "sonar.tests", "src/test"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test.inclusions", ["src/test/java"]

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");
        property "sonar.jacoco.reportPaths", files

        def reportXML = "${project.rootDir}/app/src/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", ["src/jacoco/jacocoTestReport/jacocoTestReport.xml", "**/jacocoTestReport/jacocoTestReport.xml", reportXML]

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
    }
}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "com.android.example.geofences"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'com.android.example.geofences'

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.8"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}